import { renderHook, act } from '@testing-library/react';\nimport { useAnnouncer } from '../useAnnouncer';\n\ndescribe('useAnnouncer', () => {\n  beforeEach(() => {\n    // Clean up any announcer elements before each test\n    document.body.innerHTML = '';\n  });\n\n  it('should create an announcer element with default options', () => {\n    const { result } = renderHook(() => useAnnouncer());\n\n    act(() => {\n      result.current.announce('Test message');\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer).toBeTruthy();\n    expect(announcer?.getAttribute('aria-live')).toBe('polite');\n    expect(announcer?.textContent).toBe('Test message');\n    expect(announcer?.className).toBe('sr-only');\n  });\n\n  it('should create an announcer element with custom politeness', () => {\n    const { result } = renderHook(() => useAnnouncer({ politeness: 'assertive' }));\n\n    act(() => {\n      result.current.announce('Test message');\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer?.getAttribute('aria-live')).toBe('assertive');\n  });\n\n  it('should clear announcement after specified delay', async () => {\n    jest.useFakeTimers();\n\n    const { result } = renderHook(() => useAnnouncer({ clearAfter: 1000 }));\n\n    act(() => {\n      result.current.announce('Test message');\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer?.textContent).toBe('Test message');\n\n    act(() => {\n      jest.advanceTimersByTime(1000);\n    });\n\n    expect(announcer?.textContent).toBe('');\n\n    jest.useRealTimers();\n  });\n\n  it('should cleanup on unmount', () => {\n    const { unmount } = renderHook(() => useAnnouncer());\n\n    act(() => {\n      unmount();\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer).toBeFalsy();\n  });\n\n  it('should handle multiple announcements', () => {\n    const { result } = renderHook(() => useAnnouncer());\n\n    act(() => {\n      result.current.announce('First message');\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer?.textContent).toBe('First message');\n\n    act(() => {\n      result.current.announce('Second message');\n    });\n\n    expect(announcer?.textContent).toBe('Second message');\n  });\n\n  it('should handle assertive announcements', () => {\n    const { result } = renderHook(() => useAnnouncer());\n\n    act(() => {\n      result.current.announceAssertive('Important message');\n    });\n\n    const announcer = document.querySelector('[role="status"]');\n    expect(announcer?.textContent).toBe('Important message');\n  });\n});